#!/usr/bin/env python
# tab-width: 4

# Have this script running to receive alarm messages sent from PiKrellCams
# on your LAN and edit the sound playing command for your setup.
# TODO: play different sounds depending on from_host, or put the from_host
#   in an espeak commmand.  The audio_command would then need to be set after
#   from_host is known.
#   Extend the alarm message to have something like alarm level args.
# FIXME: repeat receive detection looks only at message id and not at
#   the from_host & message id combination.  Also what about sound playing
#   collisions if alarms are received from different hosts?
#
import socket
import struct
import os
import time

# Edit and uncomment one audio_command.  Depending on the audio command, you
# may need to apt-get install additional packages such as espeak or mpg123
#
audio_command = "aplay /home/pi/audio/danger-will-robinson.wav &"
#audio_command = "mpg123 path-to-audiofile.mp3 &"
#'espeak' + " '" + ", motion detected' &"

# Edit holdoff to be the minimum seconds between accepting alarm messages.
#   It should be long enough for a previous audio alarm to complete and
#   probably less than the holdoff in the sending motion-send-alarm script.
#   I've found that sound playing can hang for a while if aplay's step on
#   each other when pkc-alarm is run on a Pi.
#
holdoff = 5



PKC_MULTICAST_GROUP_IP   = '225.0.0.55'
PKC_MULTICAST_GROUP_PORT = 22555

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind((PKC_MULTICAST_GROUP_IP, PKC_MULTICAST_GROUP_PORT))
mreq = struct.pack("4sl", socket.inet_aton(PKC_MULTICAST_GROUP_IP), socket.INADDR_ANY)
sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)

id = 0
idprev = 0
tprev = 0
tplay = 0

this_host = socket.gethostname()

def host_match(from_host, to_hosts):
	if ('all' in to_hosts.lower()): 
		if ('!' in to_hosts):
			return from_host != this_host
		else:
			return True
	host_list = to_hosts.split(',')
	if (this_host in host_list):
		return True
	return False


while True:
	line = sock.recv(256).decode()
	tnow = time.time()
#	print(line)

	from_host, to_hosts, msg_type, msg_body = line.split(' ', 3)
	if (msg_type != 'message' or msg_body != 'alarm'):
		continue;

	idx = from_host.find(':')
	if (idx >= 0):
		from_host, ids = from_host.split(':')
		id = int(ids)

	if (host_match(from_host, to_hosts) == False):
		continue

	# reject repeat messages of same msg_id.
	if (id == idprev and tnow - tprev <= 2):
		tprev = tnow
		continue

	if (id != idprev or tnow - tplay >= holdoff):
		print(audio_command)
		os.system(audio_command)
		tplay = tnow

	idprev = id

